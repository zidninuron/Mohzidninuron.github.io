{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SELAMAT DATANG DI HALAMAN TUGAS \u00b6 Nama : moh Zidni Nuron Nim : 180411100053 Fakultas : Teknik Prodi : Teknik Informatika matakuliah : Komputasi Numerik \u200b","title":"Beranda"},{"location":"#selamat-datang-di-halaman-tugas","text":"Nama : moh Zidni Nuron Nim : 180411100053 Fakultas : Teknik Prodi : Teknik Informatika matakuliah : Komputasi Numerik \u200b","title":"SELAMAT DATANG DI HALAMAN TUGAS"},{"location":"DeretMacLaurin/","text":"Deret MacLaurin \u00b6 Deret MacLaurin adalah deret yang jika x0=0, juga bisa disebut sebagai deret Taylor baku. Dan Deret MacLaurin Adalah Suatu fungsi fungsi f (x) Yang memiliki turunan , , , Dan seterusnya Yang kontinyu hearts selang DENGAN Maka untuk review disekitar Yaitu , DAPAT diekspansi kedalam deret Taylor. Berikut adalah rumus deret MacLaurin: Contoh : \u00b6 Uraikan sin(x) dan $$ e^x $$ dalam deret MacLaurin Jawab: Kita tentukan terlebih dahulu turunan dari sin(x) sebagai berikut: f(x) = sin x f'(x) = cos x f''(x) = -sin x f'''(x) = -cos x f''''(x) = sin x Deret MacLaurin sin(x) adalah : $$ sin x = sin 0 + \\frac{cos 0}{1!}x+\\frac{-sin0}{2!}x 2+\\frac{-cos0}{3!}x 3+\\frac{sin0}{4!}x^4...... $$ =0+x-0-\\frac{x^3}{3!}+0+.... =0+x-0-\\frac{x^3}{3!}+0+.... = x - \\frac{x^3}{3!}+.... = x - \\frac{x^3}{3!}+.... Atau dinyatakan dengan : $$ **Deret MacLaurin=e^x** $$ e^x=e^0+\\frac{(x-0)}{1!}e^0+\\frac{(x-0)^2}{2!}+\\frac{(x-0)^3}{3!}+.... **Deret MacLaurin=e^x** $$ e^x=e^0+\\frac{(x-0)}{1!}e^0+\\frac{(x-0)^2}{2!}+\\frac{(x-0)^3}{3!}+.... =1+x+\\frac{x^2}{2!}+\\frac{x^3}{3!}+.... =1+x+\\frac{x^2}{2!}+\\frac{x^3}{3!}+.... Soal e ^ 2x \u00b6 \u200b Dalam banyak masalah terapan, pilihan dasar yang mudah digunakan adalah bilangan irasional e = 2,718281828 ... \u200b Bilangan ini disebut dasar alami . Fungsi f ( x ) = ex disebut sebagai fungsi eksponensial natural. Pastikan bahwa dalam melihat fungsi eksponensial f ( x ) = ex , e adalah konstanta 2,718281828\u2026, sedangkan x adalah variabel. Untuk bilangan $$ e ^ 2x $$ maka:e 2 xe2x maka: jadi, kesimpulannya adalah sebagai berikut: kompilasi nilai x diganti dengan 4 maka hasil adalah 296,99. Daftar Program \u00b6 Untuk membuat program agar dapat mengekspansi bilangan e ^ 2x dengan nilai x = 4 hingga nilai menjadi kurang dari 0,001 dapat dibuat dengan daftar program sebagai berikut. import math #Diketahui x = 4 nilai = 1 #nilai awal a = 0 b = 1 perulangan = 1 while nilai > 0.001 : f_x = 0 f_y = 0 for i in range ( a ): f_x += int ( math . pow ( 2 , i )) * x ** i / math . factorial ( i ) for j in range ( b ): f_y += int ( math . pow ( 2 , j )) * x ** j / math . factorial ( j ) nilai = f_y - f_x a += 1 b += 1 print ( \"iterasi ke-\" , perulangan , \"= \" , nilai ) perulangan += 1 Hasil Run : iterasi ke - 1 = 1.0 iterasi ke - 2 = 8.0 iterasi ke - 3 = 32.0 iterasi ke - 4 = 85.33333333333333 iterasi ke - 5 = 170.66666666666669 iterasi ke - 6 = 273.0666666666666 iterasi ke - 7 = 364.08888888888896 iterasi ke - 8 = 416.1015873015872 iterasi ke - 9 = 416.1015873015872 iterasi ke - 10 = 369.8680776014112 iterasi ke - 11 = 295.89446208112895 iterasi ke - 12 = 215.195972422639 iterasi ke - 13 = 143.46398161509296 iterasi ke - 14 = 88.28552714774924 iterasi ke - 15 = 50.448872655856576 iterasi ke - 16 = 26.90606541645684 iterasi ke - 17 = 13.45303270822842 iterasi ke - 18 = 6.330838921519444 iterasi ke - 19 = 2.8137061873417224 iterasi ke - 20 = 1.184718394670199 iterasi ke - 21 = 0.47388735786807956 iterasi ke - 22 = 0.18052851728316455 iterasi ke - 23 = 0.06564673355751438 iterasi ke - 24 = 0.022833646454728296 iterasi ke - 25 = 0.0076112154847578495 iterasi ke - 26 = 0.0024355889549951826 iterasi ke - 27 = 0.0007494119863622473 Terimakasih semoga bermanfaat. Mathjax.Hub.Config({ tex2jax: {inLineMath: [['$$','$$']]} });","title":"Tugas 1"},{"location":"DeretMacLaurin/#deret-maclaurin","text":"Deret MacLaurin adalah deret yang jika x0=0, juga bisa disebut sebagai deret Taylor baku. Dan Deret MacLaurin Adalah Suatu fungsi fungsi f (x) Yang memiliki turunan , , , Dan seterusnya Yang kontinyu hearts selang DENGAN Maka untuk review disekitar Yaitu , DAPAT diekspansi kedalam deret Taylor. Berikut adalah rumus deret MacLaurin:","title":"Deret MacLaurin"},{"location":"DeretMacLaurin/#contoh","text":"Uraikan sin(x) dan $$ e^x $$ dalam deret MacLaurin Jawab: Kita tentukan terlebih dahulu turunan dari sin(x) sebagai berikut: f(x) = sin x f'(x) = cos x f''(x) = -sin x f'''(x) = -cos x f''''(x) = sin x Deret MacLaurin sin(x) adalah : $$ sin x = sin 0 + \\frac{cos 0}{1!}x+\\frac{-sin0}{2!}x 2+\\frac{-cos0}{3!}x 3+\\frac{sin0}{4!}x^4...... $$ =0+x-0-\\frac{x^3}{3!}+0+.... =0+x-0-\\frac{x^3}{3!}+0+.... = x - \\frac{x^3}{3!}+.... = x - \\frac{x^3}{3!}+.... Atau dinyatakan dengan : $$ **Deret MacLaurin=e^x** $$ e^x=e^0+\\frac{(x-0)}{1!}e^0+\\frac{(x-0)^2}{2!}+\\frac{(x-0)^3}{3!}+.... **Deret MacLaurin=e^x** $$ e^x=e^0+\\frac{(x-0)}{1!}e^0+\\frac{(x-0)^2}{2!}+\\frac{(x-0)^3}{3!}+.... =1+x+\\frac{x^2}{2!}+\\frac{x^3}{3!}+.... =1+x+\\frac{x^2}{2!}+\\frac{x^3}{3!}+....","title":"Contoh :"},{"location":"DeretMacLaurin/#soal-e-2x","text":"\u200b Dalam banyak masalah terapan, pilihan dasar yang mudah digunakan adalah bilangan irasional e = 2,718281828 ... \u200b Bilangan ini disebut dasar alami . Fungsi f ( x ) = ex disebut sebagai fungsi eksponensial natural. Pastikan bahwa dalam melihat fungsi eksponensial f ( x ) = ex , e adalah konstanta 2,718281828\u2026, sedangkan x adalah variabel. Untuk bilangan $$ e ^ 2x $$ maka:e 2 xe2x maka: jadi, kesimpulannya adalah sebagai berikut: kompilasi nilai x diganti dengan 4 maka hasil adalah 296,99.","title":"Soal e ^ 2x"},{"location":"DeretMacLaurin/#daftar-program","text":"Untuk membuat program agar dapat mengekspansi bilangan e ^ 2x dengan nilai x = 4 hingga nilai menjadi kurang dari 0,001 dapat dibuat dengan daftar program sebagai berikut. import math #Diketahui x = 4 nilai = 1 #nilai awal a = 0 b = 1 perulangan = 1 while nilai > 0.001 : f_x = 0 f_y = 0 for i in range ( a ): f_x += int ( math . pow ( 2 , i )) * x ** i / math . factorial ( i ) for j in range ( b ): f_y += int ( math . pow ( 2 , j )) * x ** j / math . factorial ( j ) nilai = f_y - f_x a += 1 b += 1 print ( \"iterasi ke-\" , perulangan , \"= \" , nilai ) perulangan += 1 Hasil Run : iterasi ke - 1 = 1.0 iterasi ke - 2 = 8.0 iterasi ke - 3 = 32.0 iterasi ke - 4 = 85.33333333333333 iterasi ke - 5 = 170.66666666666669 iterasi ke - 6 = 273.0666666666666 iterasi ke - 7 = 364.08888888888896 iterasi ke - 8 = 416.1015873015872 iterasi ke - 9 = 416.1015873015872 iterasi ke - 10 = 369.8680776014112 iterasi ke - 11 = 295.89446208112895 iterasi ke - 12 = 215.195972422639 iterasi ke - 13 = 143.46398161509296 iterasi ke - 14 = 88.28552714774924 iterasi ke - 15 = 50.448872655856576 iterasi ke - 16 = 26.90606541645684 iterasi ke - 17 = 13.45303270822842 iterasi ke - 18 = 6.330838921519444 iterasi ke - 19 = 2.8137061873417224 iterasi ke - 20 = 1.184718394670199 iterasi ke - 21 = 0.47388735786807956 iterasi ke - 22 = 0.18052851728316455 iterasi ke - 23 = 0.06564673355751438 iterasi ke - 24 = 0.022833646454728296 iterasi ke - 25 = 0.0076112154847578495 iterasi ke - 26 = 0.0024355889549951826 iterasi ke - 27 = 0.0007494119863622473 Terimakasih semoga bermanfaat. Mathjax.Hub.Config({ tex2jax: {inLineMath: [['$$','$$']]} });","title":"Daftar Program"},{"location":"METODE%20NEWTON%20RAPHSON/","text":"METODE NEWTON RAPHSON \u00b6 \u200b Metode Newton Raphson adalah metode pendekatan yang menggunakan satu titik awal dan mendekatinya dengan memperhatikan slope atau gradien pada titik tersebut. Titik pendekatan ke n+1 dituliskan dengan : Algoritma \u00b6 1.Definisikan fungsi f(x) dan f1(x) 2.Tentukan toleransi error (e) dan iterasi maksimum(n) 3.Tentukan nilai pendekatan awal x0 4.Hitung f(x0) dan f1(x0) 5.Untuk iterasi 1=1 s/d n atau |f(xi) e>= Hitung f(xi) dan f1(xi) Akar perasmaan adalah nilai xi yang terakhir diperoleh. Permasalahan \u00b6 Permasalahan pada pemakaian metode Newton Raphson adalah : Metode ini tidak dapat digunakan ketika titik pendekatannya berada pada titik ekstrim atau titik puncak, karena pada titik ini nilai F^1 (x) = 0 sehingga nilai penyebut dari f(x)/f^1(x) sama dengan nol, secara grafis dapat dilihat sebagai berikut: Bila titik pendekatan berada pada titik puncak, maka titik selanjutnya akan berada di tak berhingga. Metode ini menjadi sulit atau lama mendapatkan penyelesaian ketika titik pendekatannya berada di antara dua titik stasioner. \u200b Bila titik pendekatan berada pada dua tiitik puncak akan dapat mengakibatkan hilangnya penyelesaian (divergensi). Hal ini disebabkan titik selanjutnya berada pada salah satu titik puncak atau arah pendekatannya berbeda. Untuk dapat menyelesaikan kedua permasalahan pada metode Newton Raphson ini, maka metode Newton Raphson perlu dimodifikasi dengan : Bila titik pendekatan berada pada titik puncak maka titik pendekatan tersebut harus di geser sedikit, dimana \u03b4adalah konstanta yang ditentukan dengan demikian dan metode Newton Raphson tetap dapat berjalan Untuk menghindari titik-titik pendekatan yang berada jauh, sebaiknya pemakaian metode Newton Raphson ini didahului oleh metode tabel, sehingga dapat di jamin konvergensi dari metode Newton Raphson. Contoh Program \u00b6 Program python untuk memperkirakan akar polinomial: #import math - untuk mengambil library matematika #Program python untuk memperkirakan akar polinomial #menggunakan metode newton-raphson import math #f(x) - fungsi polynomial def f ( x ): function = ( x ** 3 ) - ( 2 * x ) - 1 return function #berfungsi untuk menemukan turunan dari polinomial def derivative ( x ): h = 0.000001 derivative = ( f ( x + h ) - f ( x )) / h return derivative def newton_raphson ( x ): return ( x - ( f ( x ) / derivative ( x ))) # p - titik awal mis. nilai lebih dekat ke root # n - jmulah iterasi def iterate ( p , n ): print ( \"Banyak Iterasinya =\" , n ) x = p for i in range ( n ): x = newton_raphson ( x ) print ( \"iterasi ke-\" , i , \"=\" , x ) return ( \"\" ) #cetakan akar polinomial x ^ 3 - 2x - 1 menggunakan 20 iterasi dan ambil titik awal sebagai 1 print ( iterate ( 1 , 20 )) Banyak Iterasinya = 20 iterasi ke- 0 = 2.999994000093219 iterasi ke- 1 = 2.199996832141079 iterasi ke- 2 = 1.7808294919560141 iterasi ke- 3 = 1.6363030634057565 iterasi ke- 4 = 1.618304588651506 iterasi ke- 5 = 1.6180340496697716 iterasi ke- 6 = 1.6180339887499484 iterasi ke- 7 = 1.6180339887498947 iterasi ke- 8 = 1.618033988749895 iterasi ke- 9 = 1.618033988749895 iterasi ke- 10 = 1.618033988749895 iterasi ke- 11 = 1.618033988749895 iterasi ke- 12 = 1.618033988749895 iterasi ke- 13 = 1.618033988749895 iterasi ke- 14 = 1.618033988749895 iterasi ke- 15 = 1.618033988749895 iterasi ke- 16 = 1.618033988749895 iterasi ke- 17 = 1.618033988749895 iterasi ke- 18 = 1.618033988749895 iterasi ke- 19 = 1.618033988749895 >>> MathJax.Hub.Config({ tex2jax: {inlineMath: [['$$','$$']]} });","title":"Tugas 2"},{"location":"METODE%20NEWTON%20RAPHSON/#metode-newton-raphson","text":"\u200b Metode Newton Raphson adalah metode pendekatan yang menggunakan satu titik awal dan mendekatinya dengan memperhatikan slope atau gradien pada titik tersebut. Titik pendekatan ke n+1 dituliskan dengan :","title":"METODE NEWTON RAPHSON"},{"location":"METODE%20NEWTON%20RAPHSON/#algoritma","text":"1.Definisikan fungsi f(x) dan f1(x) 2.Tentukan toleransi error (e) dan iterasi maksimum(n) 3.Tentukan nilai pendekatan awal x0 4.Hitung f(x0) dan f1(x0) 5.Untuk iterasi 1=1 s/d n atau |f(xi) e>= Hitung f(xi) dan f1(xi) Akar perasmaan adalah nilai xi yang terakhir diperoleh.","title":"Algoritma"},{"location":"METODE%20NEWTON%20RAPHSON/#permasalahan","text":"Permasalahan pada pemakaian metode Newton Raphson adalah : Metode ini tidak dapat digunakan ketika titik pendekatannya berada pada titik ekstrim atau titik puncak, karena pada titik ini nilai F^1 (x) = 0 sehingga nilai penyebut dari f(x)/f^1(x) sama dengan nol, secara grafis dapat dilihat sebagai berikut: Bila titik pendekatan berada pada titik puncak, maka titik selanjutnya akan berada di tak berhingga. Metode ini menjadi sulit atau lama mendapatkan penyelesaian ketika titik pendekatannya berada di antara dua titik stasioner. \u200b Bila titik pendekatan berada pada dua tiitik puncak akan dapat mengakibatkan hilangnya penyelesaian (divergensi). Hal ini disebabkan titik selanjutnya berada pada salah satu titik puncak atau arah pendekatannya berbeda. Untuk dapat menyelesaikan kedua permasalahan pada metode Newton Raphson ini, maka metode Newton Raphson perlu dimodifikasi dengan : Bila titik pendekatan berada pada titik puncak maka titik pendekatan tersebut harus di geser sedikit, dimana \u03b4adalah konstanta yang ditentukan dengan demikian dan metode Newton Raphson tetap dapat berjalan Untuk menghindari titik-titik pendekatan yang berada jauh, sebaiknya pemakaian metode Newton Raphson ini didahului oleh metode tabel, sehingga dapat di jamin konvergensi dari metode Newton Raphson.","title":"Permasalahan"},{"location":"METODE%20NEWTON%20RAPHSON/#contoh-program","text":"Program python untuk memperkirakan akar polinomial: #import math - untuk mengambil library matematika #Program python untuk memperkirakan akar polinomial #menggunakan metode newton-raphson import math #f(x) - fungsi polynomial def f ( x ): function = ( x ** 3 ) - ( 2 * x ) - 1 return function #berfungsi untuk menemukan turunan dari polinomial def derivative ( x ): h = 0.000001 derivative = ( f ( x + h ) - f ( x )) / h return derivative def newton_raphson ( x ): return ( x - ( f ( x ) / derivative ( x ))) # p - titik awal mis. nilai lebih dekat ke root # n - jmulah iterasi def iterate ( p , n ): print ( \"Banyak Iterasinya =\" , n ) x = p for i in range ( n ): x = newton_raphson ( x ) print ( \"iterasi ke-\" , i , \"=\" , x ) return ( \"\" ) #cetakan akar polinomial x ^ 3 - 2x - 1 menggunakan 20 iterasi dan ambil titik awal sebagai 1 print ( iterate ( 1 , 20 )) Banyak Iterasinya = 20 iterasi ke- 0 = 2.999994000093219 iterasi ke- 1 = 2.199996832141079 iterasi ke- 2 = 1.7808294919560141 iterasi ke- 3 = 1.6363030634057565 iterasi ke- 4 = 1.618304588651506 iterasi ke- 5 = 1.6180340496697716 iterasi ke- 6 = 1.6180339887499484 iterasi ke- 7 = 1.6180339887498947 iterasi ke- 8 = 1.618033988749895 iterasi ke- 9 = 1.618033988749895 iterasi ke- 10 = 1.618033988749895 iterasi ke- 11 = 1.618033988749895 iterasi ke- 12 = 1.618033988749895 iterasi ke- 13 = 1.618033988749895 iterasi ke- 14 = 1.618033988749895 iterasi ke- 15 = 1.618033988749895 iterasi ke- 16 = 1.618033988749895 iterasi ke- 17 = 1.618033988749895 iterasi ke- 18 = 1.618033988749895 iterasi ke- 19 = 1.618033988749895 >>> MathJax.Hub.Config({ tex2jax: {inlineMath: [['$$','$$']]} });","title":"Contoh Program"}]}